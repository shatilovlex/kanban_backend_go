// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const ProjectArchive = `-- name: ProjectArchive :exec
UPDATE pg_storage.kanban.project SET archived=$2 WHERE id=$1
`

type ProjectArchiveParams struct {
	ID       pgtype.UUID `db:"id" json:"id"`
	Archived bool        `db:"archived" json:"archived"`
}

func (q *Queries) ProjectArchive(ctx context.Context, arg ProjectArchiveParams) error {
	_, err := q.db.Exec(ctx, ProjectArchive, arg.ID, arg.Archived)
	return err
}

const ProjectCreate = `-- name: ProjectCreate :exec
INSERT INTO pg_storage.kanban.project (id, name, description)
VALUES ($1, $2, $3)
`

type ProjectCreateParams struct {
	ID          pgtype.UUID `db:"id" json:"id"`
	Name        *string     `db:"name" json:"name"`
	Description *string     `db:"description" json:"description"`
}

func (q *Queries) ProjectCreate(ctx context.Context, arg ProjectCreateParams) error {
	_, err := q.db.Exec(ctx, ProjectCreate, arg.ID, arg.Name, arg.Description)
	return err
}

const ProjectList = `-- name: ProjectList :many
SELECT id, name, description FROM pg_storage.kanban.project WHERE archived IS FALSE
`

type ProjectListRow struct {
	ID          pgtype.UUID `db:"id" json:"id"`
	Name        *string     `db:"name" json:"name"`
	Description *string     `db:"description" json:"description"`
}

func (q *Queries) ProjectList(ctx context.Context) ([]*ProjectListRow, error) {
	rows, err := q.db.Query(ctx, ProjectList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ProjectListRow{}
	for rows.Next() {
		var i ProjectListRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
